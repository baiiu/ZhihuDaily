apply plugin: 'com.android.application'
apply plugin: 'channel'
apply from: '../buildSystem/tinker.gradle'

def getTinkerIdValue() {
    return hasProperty("TINKER_ID") ? TINKER_ID : rootProject.ext.androidVersionConfig.versionCode
}

android {
    def cfg = rootProject.ext.androidVersionConfig
    compileSdkVersion cfg.androidCompileSdkVersion

    defaultConfig {
        minSdkVersion cfg.androidMinSdkVersion
        targetSdkVersion cfg.androidTargetSdkVersion
        versionCode cfg.versionCode as int
        versionName cfg.versionName


        /**
         * you can use multiDex and install it in your ApplicationLifeCycle implement*/
        multiDexEnabled true
        /**
         * buildConfig can change during patch!
         * we can use the newly value when patch*/
        //        buildConfigField "String", "MESSAGE", "\"I am the base apk\""
        //        buildConfigField "String", "MESSAGE", "\"I am the patch apk\""
        /**
         * client version would update with patch
         * so we can get the newly git version easily!*/
        buildConfigField "String", "TINKER_ID", "\"${getTinkerIdValue()}\""
        buildConfigField "String", "PLATFORM", "\"all\""
    }

    signingConfigs {
        release {
            keyAlias 'dailyAlias'
            keyPassword '654321'
            storeFile file('../daily.keystore')
            storePassword '123456'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
        }
    }
    compileOptions {
        sourceCompatibility rootProject.ext.javaSourceCompatibility as JavaVersion
        targetCompatibility rootProject.ext.javaTargetCompatibility as JavaVersion
    }
    //    resourcePrefix "app_"
    sourceSets {
        main {
            java.srcDirs = ['src/main/java']
        }
    }

    channel{
        channelFile = file("../channelDaily.txt")
    }

    rebuildChannel{
        channelFile = file("../channelRebuild.txt")
    }

}

dependencies {
    testImplementation 'junit:junit:4.12'
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':module_service')
    implementation project(':module_common:lib_common')

    if (isRunAlone.toBoolean()) {
        api 'com.leon.channel:helper:1.1.5'
    } else {
        implementation project(':component_daily')
        implementation project(':component_gank')
        implementation project(':component_setting')
    }

}
